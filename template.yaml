AWSTemplateFormatVersion: '2010-09-09'
Description: S3DB Converter

Parameters:
  PythonVersion:
    Type: String
    Description: Python version to use for lambda functions
  CodeS3Bucket:
    Type: String
    Description: S3 Bucket containing the lambda code bundle
  CodeS3Key:
    Type: String
    Description: S3 Key of the lambda code bundle
  S3DBBucket:
    Type: String
    Description: The production datafeeds transmuter output bucket, i.e. source data
  S3DBProdPrefix:
    Type: String
    Description: The production datafeeds transmuter output bucket prefix
  S3DBBucketSNS:
    Type: String
    Description: The production SNS Topic that publishes new/updated S3 file events in the S3DBBucket
  S3DBBucketSNSFilter:
    Type: String
    Description: The subscription filter to use for the S3DBBucketSNS, this should be based off the S3DBProdPrefix

Resources:
  S3DBBucketSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt LiveJobSQS.Arn
      FilterPolicy: !Ref S3DBBucketSNSFilter
      Protocol: sqs
      TopicArn: !Ref S3DBBucketSNS

  LiveJobDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600 # 14 days

  # Live prod events are sent here
  LiveJobSQS:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 86400  # 24 hr
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt LiveJobDLQ.Arn
        maxReceiveCount: 3
      VisibilityTimeout: 3000

  LiveJobSQSPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: sqs:SendMessage
            Resource: !GetAtt LiveJobSQS.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref S3DBBucketSNS
      Queues:
        - !Ref LiveJobSQS

  SingleJobDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600 # 14 days

  # Single-file backfill requests (by the request generator) are sent here.
  # Datafeeds currently uses a daily partition, so single-file requests are used when
  # generating daily partitions, where each source file maps to a single dest file,
  # and no file repartitioning happens.
  SingleJobSQS:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 86400  # 24 hr
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt SingleJobDLQ.Arn
        maxReceiveCount: 3
      VisibilityTimeout: 3000

  BatchJobDLQ:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600 # 14 days

  # Batch-file backfill requests (by the request generator) are sent here.
  # Datafeeds currently uses a daily partition, so batch-file requests are used when
  # generating monthly or yearly partitions, where  multiple source files are merged
  # into a single dest file.
  BatchJobSQS:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 86400  # 24 hr
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt BatchJobDLQ.Arn
        maxReceiveCount: 3
      VisibilityTimeout: 3000

  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: !Sub /${AWS::StackName}/
      Policies:
        - PolicyName: LambdaFunctionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - s3:ListBucket
                Effect: Allow
                Resource:
                  - !Sub arn:aws:s3:::${S3DBBucket}
              - Action:
                  - s3:GetObject*
                  - s3:PutObject*
                Effect: Allow
                Resource:
                  - !Sub arn:aws:s3:::${S3DBBucket}/*
              - Action:
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ChangeMessageVisibility
                Effect: Allow
                Resource:
                  - !GetAtt SingleJobSQS.Arn
                  - !GetAtt BatchJobSQS.Arn
                  - !GetAtt LiveJobSQS.Arn

  RequestGeneratorFunction:
    Type: AWS::Lambda::Function
    Description: The Lambda function used to generate backfill requests.
    Properties:
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: !Ref CodeS3Key
      Description: A Lambda function to generate requests.
      Handler: lambdas/request_generator.lambda_handler
      Environment:
        Variables:
          SINGLE_JOB_SQS_URL: !Ref SingleJobSQS
          BATCH_JOB_SQS_URL: !Ref BatchJobSQS
      MemorySize: 512
      Role: !GetAtt LambdaFunctionRole.Arn
      Runtime: !Ref PythonVersion
      Timeout: 900  # 15 mins

  # The Single Job Function and Batch Job Function runs the exact same code, but we
  # split them up into 2 separate function to set a different memory requirement 
  SingleJobRequestHandlerFunction:
    Type: AWS::Lambda::Function
    Description: The Lambda function used to process single-file backfill requests.
    Properties:
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: !Ref CodeS3Key
      Description: A Lambda function to handle requests.
      Handler: lambdas/request_handler.lambda_handler
      MemorySize: 2048
      Role: !GetAtt LambdaFunctionRole.Arn
      Runtime: !Ref PythonVersion
      Timeout: 900  # 15 mins

  SingleJobRequestHandlerEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1  # max: 10
      Enabled: true
      EventSourceArn: !GetAtt SingleJobSQS.Arn
      FunctionName: !GetAtt SingleJobRequestHandlerFunction.Arn

  # The Single Job Function and Batch Job Function runs the exact same code, but we
  # split them up into 2 separate function to set a different memory requirement 
  BatchJobRequestHandlerFunction:
    Type: AWS::Lambda::Function
    Description: The Lambda function used to process batch-file backfill requests.
    Properties:
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: !Ref CodeS3Key
      Description: A Lambda function to handle requests.
      Handler: lambdas/request_handler.lambda_handler
      MemorySize: 10240
      Role: !GetAtt LambdaFunctionRole.Arn
      Runtime: !Ref PythonVersion
      Timeout: 900  # 15 mins

  BatchJobRequestHandlerEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1  # max: 10
      Enabled: true
      EventSourceArn: !GetAtt BatchJobSQS.Arn
      FunctionName: !GetAtt BatchJobRequestHandlerFunction.Arn

  ProdListenerFunction:
    Type: AWS::Lambda::Function
    Description: >-
      The Lambda function that receives live prod event and generate a conversion request
    Properties:
      Code:
        S3Bucket: !Ref CodeS3Bucket
        S3Key: !Ref CodeS3Key
      Description: A Lambda function to listen to prod events.
      Handler: lambdas/prod_listener.lambda_handler
      Environment:
        Variables:
          SINGLE_JOB_SQS_URL: !Ref SingleJobSQS
      MemorySize: 128
      Role: !GetAtt LambdaFunctionRole.Arn
      Runtime: !Ref PythonVersion
      Timeout: 30

  ProdListenerEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1  # max: 10
      Enabled: true
      EventSourceArn: !GetAtt LiveJobSQS.Arn
      FunctionName: !GetAtt ProdListenerFunction.Arn

Outputs:
  RequestGeneratorFunctionName:
    Value: !Ref RequestGeneratorFunction
